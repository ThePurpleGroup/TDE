package br.com.senac.view;

import br.com.senac.bean.Cliente;
import br.com.senac.bean.Endereco;
import br.com.senac.dao.ClienteDAO;
import br.com.senac.dao.EnderecoDAO;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.time.format.DateTimeFormatter;

public class TelaPrincipal extends JFrame {

    private JButton btnNovo;
    private JPanel panelPrincipal;
    private JTable tableCliente;
    private JScrollPane jScrollPanel;
    private JButton buttonSelect;

    public void preencherTabela() {

        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{
                },
                new String[]{
                        "Id", "Nome", "Data de Nascimento"
                }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        ClienteDAO clienteDAO = new ClienteDAO();
        for (Object o : clienteDAO.select()) {

            Cliente cliente = (Cliente) o;
            model.addRow(new Object[]{
                    Math.toIntExact(cliente.getId()),
                    cliente.getNome(),
                    cliente.getDataNascimento().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
            });
        }
        tableCliente.setModel(model);
        jScrollPanel.setViewportView(tableCliente);

    }

    public TelaPrincipal() {

        super("purple Desktop");
        this.setContentPane(this.panelPrincipal);
        this.setLocation(341, 45);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.pack();
        preencherTabela();

        btnNovo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                TelaCadastro telaCadastro = new TelaCadastro();
                telaCadastro.btnAtualizar.setVisible(false);
                telaCadastro.btnExcluir.setVisible(false);
                telaCadastro.setVisible(true);
                telaCadastro.addWindowListener(new WindowAdapter() {

                    @Override
                    public void windowClosed(WindowEvent e) {
                        super.windowClosed(e);
                        preencherTabela();
                    }

                });
            }
        });

        buttonSelect.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                TelaCadastro telaCadastro = new TelaCadastro();
                telaCadastro.btnAdicionar.setVisible(false);
                ClienteDAO clienteDAO = new ClienteDAO();
                EnderecoDAO enderecoDAO = new EnderecoDAO();
                if (tableCliente.getSelectedRow() != -1) {
                    int i = Integer.parseInt(tableCliente.getValueAt(tableCliente.getSelectedRow(), 0).toString());
                    Cliente cliente = (Cliente) clienteDAO.select(i);
                    Endereco endereco = (Endereco) enderecoDAO.select(Math.toIntExact(cliente.getIdEndereco()));
                    telaCadastro.preencheCadastro(cliente, endereco);
                    telaCadastro.setVisible(true);
                    telaCadastro.addWindowListener(new WindowAdapter() {

                        @Override
                        public void windowClosed(WindowEvent e) {
                            super.windowClosed(e);
                            preencherTabela();
                        }
                    });
                } else {
                    JOptionPane.showMessageDialog(rootPane, " Ã‰ necessario selecionar um Cliente para continuar");
                }

            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelPrincipal = new JPanel();
        panelPrincipal.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 2, new Insets(0, 10, 10, 10), -1, -1));
        panelPrincipal.setBackground(new Color(-1));
        panelPrincipal.setEnabled(true);
        panelPrincipal.setFocusable(true);
        Font panelPrincipalFont = this.$$$getFont$$$(null, -1, -1, panelPrincipal.getFont());
        if (panelPrincipalFont != null) panelPrincipal.setFont(panelPrincipalFont);
        panelPrincipal.setForeground(new Color(-2308));
        panelPrincipal.setPreferredSize(new Dimension(683, 560));
        panelPrincipal.setRequestFocusEnabled(false);
        final JLabel label1 = new JLabel();
        label1.setAlignmentY(0.5f);
        label1.setBackground(new Color(-14606047));
        Font label1Font = this.$$$getFont$$$("Montserrat", Font.BOLD, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-10994318));
        label1.setInheritsPopupMenu(false);
        label1.setName("");
        label1.setText("purpleDesktop");
        label1.setVisible(true);
        panelPrincipal.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panelPrincipal.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 5), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panelPrincipal.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 20), null, 0, false));
        jScrollPanel = new JScrollPane();
        panelPrincipal.add(jScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 400), new Dimension(0, 0), null, 0, false));
        tableCliente = new JTable();
        jScrollPanel.setViewportView(tableCliente);
        final JLabel label2 = new JLabel();
        label2.setBackground(new Color(-14606047));
        Font label2Font = this.$$$getFont$$$("Roboto Light", Font.BOLD, 14, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setForeground(new Color(-1));
        label2.setText("Clientes Cadastrados");
        panelPrincipal.add(label2, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        panelPrincipal.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 10), null, null, 0, false));
        btnNovo = new JButton();
        btnNovo.setBackground(new Color(-10994318));
        btnNovo.setBorderPainted(false);
        Font btnNovoFont = this.$$$getFont$$$("Montserrat", Font.BOLD, 16, btnNovo.getFont());
        if (btnNovoFont != null) btnNovo.setFont(btnNovoFont);
        btnNovo.setForeground(new Color(-1));
        btnNovo.setHorizontalTextPosition(0);
        btnNovo.setLabel("Novo Cliente");
        btnNovo.setText("Novo Cliente");
        panelPrincipal.add(btnNovo, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 30), null, 0, false));
        buttonSelect = new JButton();
        buttonSelect.setActionCommand("select");
        buttonSelect.setBackground(new Color(-10994318));
        buttonSelect.setBorderPainted(false);
        buttonSelect.setContentAreaFilled(true);
        Font buttonSelectFont = this.$$$getFont$$$("Montserrat", Font.BOLD, 16, buttonSelect.getFont());
        if (buttonSelectFont != null) buttonSelect.setFont(buttonSelectFont);
        buttonSelect.setForeground(new Color(-1));
        buttonSelect.setHorizontalTextPosition(0);
        buttonSelect.setLabel("Selecionar");
        buttonSelect.setText("Selecionar");
        panelPrincipal.add(buttonSelect, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 30), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelPrincipal;
    }
}
